generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id
  email         String?
  name          String?
  image         String?
  plan          String         @default("free")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  conversations Conversation[]
}

model Advisor {
  id             String          @id
  firstName      String?
  lastName       String?
  imageUrl       String?
  schemaVersion  String
  status         AdvisorStatus   @default(active)
  persona        Json
  roleDefinition Json?
  components     Json
  metadata       Json?
  localization   Json?
  modelHint      String?
  tags           String[]        @default([])
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  memories       AdvisorMemory[]
  conversations  Conversation[]
  messages       Message[]
}

model Conversation {
  id              String          @id @default(cuid())
  userId          String
  title           String?
  activeAdvisorId String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  memories        AdvisorMemory[]
  activeAdvisor   Advisor?        @relation(fields: [activeAdvisorId], references: [id])
  user            User            @relation(fields: [userId], references: [id])
  messages        Message[]
  summaries       ThreadSummary[]
}

model Message {
  id             String        @id @default(cuid())
  conversationId String
  sender         MessageSender
  advisorId      String?
  content        String
  contentJson    Json?
  mentions       String[]      @default([])
  tokensUsed     Int?
  createdAt      DateTime      @default(now())
  advisor        Advisor?      @relation(fields: [advisorId], references: [id])
  conversation   Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

model ThreadSummary {
  id             String       @id @default(cuid())
  conversationId String
  content        String
  startMessageId String?
  endMessageId   String?
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

model AdvisorMemory {
  id             String       @id @default(cuid())
  conversationId String
  advisorId      String
  key            String
  value          Json
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  advisor        Advisor      @relation(fields: [advisorId], references: [id])
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@unique([conversationId, advisorId, key])
}

enum AdvisorStatus {
  active
  inactive
  archived
}

enum MessageSender {
  user
  advisor
  system
}
