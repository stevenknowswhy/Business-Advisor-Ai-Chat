name: Deploy Production (ai-advisor-chat)

on:
  push:
    branches:
      - master

permissions:
  contents: read

jobs:
  deploy-production:
    name: Trigger Vercel deploy and run health checks
    runs-on: ubuntu-latest
    environment: Production

    timeout-minutes: 15
    env:
      DEPLOY_HOOK_URL: ${{ secrets.VERCEL_DEPLOY_HOOK_URL }}
      BASE_URL: ${{ secrets.PRODUCTION_BASE_URL }}

    steps:
      - name: Checkout (optional)
        uses: actions/checkout@v4

      - name: Validate required secrets are set
        run: |
          set -euo pipefail
          if [ -z "${DEPLOY_HOOK_URL:-}" ]; then
            echo "ERROR: VERCEL_DEPLOY_HOOK_URL secret is not set." >&2
            exit 1
          fi
          if [ -z "${BASE_URL:-}" ]; then
            echo "ERROR: PRODUCTION_BASE_URL secret is not set." >&2
            echo "Please set this to your production domain, e.g. https://yourapp.vercel.app" >&2
            exit 1
          fi
          echo "Using BASE_URL=${BASE_URL}"

      - name: Trigger Vercel Deploy Hook
        id: trigger
        run: |
          set -euo pipefail
          echo "Triggering Vercel deploy via Deploy Hook..."
          HTTP_CODE=$(curl -sS -o deploy_response.json -w "%{http_code}" -X POST "$DEPLOY_HOOK_URL")
          echo "HTTP_CODE=$HTTP_CODE" >> $GITHUB_OUTPUT
          echo "--- Deploy Hook response (truncated) ---"
          head -c 2000 deploy_response.json || true
          echo "\n----------------------------------------"
          if [ "$HTTP_CODE" -lt 200 ] || [ "$HTTP_CODE" -ge 300 ]; then
            echo "ERROR: Deploy hook returned HTTP $HTTP_CODE" >&2
            exit 1
          fi

      - name: Wait for deployment to complete (initial)
        run: |
          echo "Waiting ~150 seconds for Vercel build and deploy to complete..."
          sleep 150

      - name: Health Check - /api/health
        id: health
        run: |
          set -euo pipefail
          TARGET="${BASE_URL%/}/api/health"
          echo "Checking $TARGET"

          # Retry up to 10 times with 15s backoff
          for i in $(seq 1 10); do
            HTTP_CODE=$(curl -sS -o health.json -w "%{http_code}" "$TARGET") || true
            echo "Attempt $i: HTTP $HTTP_CODE"
            if [ "$HTTP_CODE" = "200" ] && grep -qi '"status"\s*:\s*"healthy"' health.json; then
              echo "Health check OK"
              head -c 1000 health.json || true
              exit 0
            fi
            sleep 15
          done

          echo "ERROR: Health check failed after retries." >&2
          echo "Last body:" >&2
          cat health.json >&2
          exit 1

      - name: Health Check - /api/debug-env (OPENROUTER_API_KEY_SET must be true)
        id: debug-env
        run: |
          set -euo pipefail
          TARGET="${BASE_URL%/}/api/debug-env"
          echo "Checking $TARGET"

          HTTP_CODE=$(curl -sS -o debug-env.json -w "%{http_code}" "$TARGET") || true
          echo "HTTP $HTTP_CODE"
          if [ "$HTTP_CODE" != "200" ]; then
            echo "ERROR: /api/debug-env returned HTTP $HTTP_CODE" >&2
            cat debug-env.json || true
            exit 1
          fi

          if ! grep -Eq '"OPENROUTER_API_KEY_SET"\s*:\s*true' debug-env.json; then
            echo "ERROR: OPENROUTER_API_KEY_SET is not true in /api/debug-env response" >&2
            cat debug-env.json >&2
            exit 1
          fi

          echo "Debug env OK. OPENROUTER_API_KEY_SET=true"

      - name: Summary
        run: |
          echo "Deployment triggered and health checks passed."
